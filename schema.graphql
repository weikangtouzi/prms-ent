# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

"make it available when different thing happens in same query"
union InterviewData = EnterpriseUserSideInterviewData | PersonalUserSideInterviewData

union JobDataListForAllUsers = JobDataBriefly | JobDataForHRDetailPageOrEntJobList

type AdminLogInResult {
  rights: String!
  token: String!
}

type ApplicantData {
  age: Int!
  applicantName: String!
  "checkout Education type for value options"
  education: String!
  experience: Int!
  "same as last field"
  lastEnterpriseName: String
  "null when not had job before"
  lastJobName: String
  "also same as last field"
  lastJobTime: String
  personalAdvantage: String!
  salaryExpected: String!
}

type CensorData {
  _id: String!
  charter: String
  enterpriseName: String
}

type City {
  city_id: String!
  name: String!
}

type CityWithChildren {
  Counties: [CountyWithChildren]!
  city_id: String!
  name: String!
}

type CompInfoForJobDetailPage {
  address_coordinates: [Float]!
  address_description: [String]!
  business_nature: EnterpriseNature!
  enterprise_logo: String!
  enterprise_size: EnterpriseSize!
  id: Int!
  industry_involved: [String]!
  name: String!
}

type Contract {
  ent: String
  id: Int!
  last_msg: String!
  last_msg_time: String!
  logo: String!
  name: String!
  pos: String
}

type County {
  county_id: String!
  name: String!
}

type CountyWithChildren {
  Towns: [Town]!
  county_id: String!
  name: String!
}

"if the status is Failed, will get the other three fields"
type EnterpriseIdentification {
  charter: String
  enterpriseName: String
  phoneNumber: String
  status: EnterpriseIdentificationStatus
}

type EnterpriseInfoForEntDetail {
  abbreviation: String!
  business_nature: EnterpriseNature!
  createdAt: String!
  enterprise_coordinates: [Float]!
  enterprise_financing: EnterpriseFinancing!
  enterprise_loc_detail: [String]!
  enterprise_logo: String
  enterprise_name: String!
  enterprise_profile: String!
  enterprise_size: EnterpriseSize
  enterprise_welfare: [String]
  established_time: String
  extra_attribute: String
  homepage: String
  industry_involved: [String]!
  job_counter: Int
  overtime_work_degree: String
  rest_rule: String
  tags: [String]!
  tel: String
  work_time: String
}

type EnterpriseQAForEntDetail {
  answer: String!
  answerCount: Int!
  question: String!
  questionCount: Int!
}

"for enterprise user interview data will be like this"
type EnterpriseUserSideInterviewData {
  jobExpectation: String!
  jobName: String!
  salary: String!
  targetName: String!
}

type HRInfoForHRDetailPage {
  company_belonged: String!
  last_log_out_time: String
  logo: String!
  name: String!
  pos: String!
}

type HRInfoForJobDetailPage {
  id: Int!
  last_log_out_time: String
  logo: String!
  name: String!
  pos: String!
}

type InterviewDetail {
  address: String!
  attachments: String!
  enterpriseName: String!
  hrName: String!
  hrPosition: String!
  isOutline: Boolean!
  jobContractedNumer: String!
  jobContractor: String!
  jobName: String!
  jobSalary: String!
  "checkout InterviewProcess type for value options"
  process: String!
  time: String!
}

type InterviewRecommentInfoForEntDetail {
  content: String!
  createdAt: String!
  id: Int!
  job_name: String!
  logo: String!
  score: Float!
  tags: [String]!
  thumbs: Int!
  user_name: String!
}

type InterviewRecommentListForEntDetail {
  HR: Float!
  comp_env: Float!
  count: Int!
  description: Float!
  recommends: [InterviewRecommentInfoForEntDetail]!
  total: Float!
}

type InterviewSchedule {
  schedul: [InterviewData]!
}

"for list query"
type JobDataBriefly {
  address_coordinate: String!
  category: [String]!
  comp_financing: EnterpriseFinancing!
  comp_name: String!
  comp_size: EnterpriseSize!
  emergency: Boolean!
  full_time_job: FullTime!
  hr_name: String!
  hr_pos: String!
  id: Int!
  job_id: Int!
  logo: String!
  max_salary: Int!
  min_education: Education!
  min_experience: Int!
  min_salary: Int!
  ontop: Boolean!
  tags: [String]!
  title: String!
}

type JobDataForHRDetailPageOrEntJobList {
  createdAt: String!
  education: Education!
  experience: Int!
  id: Int!
  loc: String!
  salary: [Int]!
  title: String!
}

"a job always contains these datas. these are formatted data, not exactly what is in database"
type JobDataForJobDetailPage {
  address_coordinate: [Float]!
  address_description: [String]!
  category: [String]!
  detail: String!
  education: Education
  experience: Int
  full_time_job: FullTime!
  id: Int!
  required_num: Int!
  salaryExpected: [Int]!
  tags: [String]
  title: String!
  updatedAt: String!
}

type JobDetailPageReply {
  company: CompInfoForJobDetailPage!
  hr: HRInfoForJobDetailPage!
  job: JobDataForJobDetailPage!
}

type JobExpectation {
  aimed_city: String!
  full_time_job: FullTime!
  industry_involved: [String]!
  job_category: [String]!
  max_salary_expectation: Int!
  min_salary_expectation: Int!
}

type JobListForHRDetailPageOrEntJobList {
  count: Int!
  data: [JobDataListForAllUsers]!
}

type JobSimpifiedDataPageView {
  count: Int!
  data: [JobDataBriefly]!
  page: Int!
  pageSize: Int!
}

"logInResult: the result of the login operation"
type LoginResult {
  "the very first time the user is created"
  createdAt: String!
  "jwt token for the user, expiresIn 60 minutes"
  token: String!
  "maybe become nullable in the future"
  username: String!
}

type Message {
  createdAt: String!
  "0 for system message"
  from: String!
  messageContent: String!
  messageType: MessageType!
  to: String!
  uuid: String!
}

type MessageEntitySelectionInt {
  value: Int
}

type MessageEntitySelectionString {
  value: String
}

type MessagePage {
  count: Int!
  messages: [Message]!
  page: Int!
  pageSize: Int!
}

"most of mutations needed token for authorization"
type Mutation {
  AdminSetCensoredForAnItem(_id: String!, description: String, isPassed: Boolean): Void
  "accept or reject an interview by id"
  CandidateAcceptOrRejectInterview(accept: Boolean!, interviewId: Int!): Void
  "insert or edit a education experience"
  CandidateEditEduExp(info: EduExp): Void
  CandidateEditJobExpectations(info: EditJobExpectation!): Void
  "insert or edit a personal advantage"
  CandidateEditPersonalAdvantage(advantage: String!): Void
  "insert or edit a project experience"
  CandidateEditProExp(info: ProExp): Void
  CandidateEditSkills(resumeId: Int!, skills: [String]!): Void
  "insert or edit a work experience"
  CandidateEditWorkExprience(info: WorkExperience!): Void
  CandidateRecruitmentApply(recruitmentId: Int!): Void
  "if wanted to send the online one, then don't need to pass resumeId"
  CandidateSendResume(resumeId: Int, targetUser: Int): Void
  "leave extraAttributes null for default upload options"
  CommonSingleUpload(extraAttributes: UploadExtraAttributes, file: Upload!): String!
  "cancel a interview, both side will have this authority, may failed when time is close to the appointed time"
  CommoncancelInterview(interviewId: Int!): Void
  "enterprise certificate required, if not will return error"
  ENTEditEnterpriseBasicInfo(info: EditEnterpriseBasicInfo!): Void
  ENTEditEnterpriseExtraData(info: String!): Void
  ENTEditEnterpriseWorkTimeAndWelfare(info: EnterpriseWorkTimeAndWelfare!): Void
  ENTEnterpriseWorkerRegister(info: EnterpriseWorkerInfo!): Void
  ENTInsertEnterpriseBasicInfo(info: EnterpriseBasicInfo!): Void
  ENTInviteWorkMate(phoneNumber: String!, pos: String, role: String): Void
  ENTRecruitmentApply(recruitmentId: Int!, size: String): Void
  ENTRemoveWorker(role: EnterpriseRole!, workerId: Int!): Void
  ENTSetDisabled(workerId: Int!): Void
  "end a iterview with the description, need to tell the interview is passed or not, most of time the description is about some special situation"
  HREndInterview(description: String, interviewId: Int!, ispassed: Boolean!): Void
  HRHideJob(jobId: Int!): Void
  "will create a interview data and set it to waiting, may return the interview id for dev version"
  HRInviteInterview(jobId: Int!, time: [String]!, userId: Int!): Void
  HRPostJob(info: JobPost!): Void
  HRRecruitmentApply(recruitmentId: Int!): Void
  HRRemoveJob(jobId: Int!): Void
  "this api need you to pass the provider's phone number as the authorization header"
  QNInsertPersonalData(info: PersonalData!): Int!
  UserChangePhoneNumber(newNum: String!): Void
  "switch to another indentity if exists, should pass indetity and role, Identity and role types are enums, checkout their type definitions, return token"
  UserChooseOrSwitchIdentity(role: EnterpriseRole, targetIdentity: Identity!): Void
  "insert or edit a personal data"
  UserEditBasicInfo(info: BasicData!): Void
  UserEditEmail(code: String!, newEmail: String!): Void
  "enterprise certification need censor"
  UserEnterpriseIdentify(info: EnterpriseCharterSencorRequest!): Void
  "only availiable when token is expired and not dead"
  UserRefreshToken: String!
  "api for register"
  UserRegister(info: Register!): Void
  "use phone number to reset password"
  UserResetPassword(info: ResetPassword!): Void
  UserSendMessage(info: SendMessage!): Void
}

type PersonalDataDetail {
  city: String!
  education: Education!
  idCardNum: String!
  name: String!
  number: String!
  skills: [String]!
}

type PersonalDataView {
  _id: String!
  "real name"
  data: PersonalDataDetail
}

"for personal user the interview data will be like this"
type PersonalUserSideInterviewData {
  enterpriseName: String!
  hrName: String!
  hrPosition: String!
  jobName: String!
  salary: String!
}

"the data of province, usually contains name and id"
type Province {
  name: String!
  "this id is = require(the official data, so don't trying to change it"
  province_id: String!
}

type ProvinceWithChildren {
  Cities: [CityWithChildren]!
  name: String!
  province_id: String!
}

"for most of get query needed token for authorization"
type Query {
  AdminGetCensorList(lastIndex: String, pageSize: Int): [CensorData]
  AdminGetUserList(info: UserListFilter, page: Int, pageSize: Int): [UserBasicInfo]!
  AdminLogIn(account: String!, password: String!): AdminLogInResult!
  CandidateCheckResumeCompletion: Boolean!
  CandidateGetAllJobCategoriesByEntId(entId: Int): [[String]]!
  CandidateGetAllJobExpectations: [JobExpectation]!
  CandidateGetEnterpriseDetail_InterviewRecomment(entId: Int): InterviewRecommentListForEntDetail!
  CandidateGetEnterpriseDetail_QA(entId: Int): EnterpriseQAForEntDetail!
  CandidateGetHRDetail_HRInfo(hrId: Int): HRInfoForHRDetailPage!
  CandidateGetHRDetail_JobListPageView(hrId: Int!, page: Int, pageSize: Int): JobListForHRDetailPageOrEntJobList!
  CandidateGetHRDetail_RecommendationsList(hrId: Int!): RecommendationsListForHRDetailPage!
  "get job data by id"
  CandidateGetJob(jobid: Int): JobDetailPageReply!
  CandidateGetJobList(filter: JobFilter): JobSimpifiedDataPageView!
  "detail page for interview"
  CommonGetIterviewDetail(interviewId: Int!): InterviewDetail
  "gets InterviewSchedule"
  CommonGetIterviewSchedule: InterviewSchedule!
  "get resume data, if cache id exists then will return the cache data, cache expired every 30 minutes"
  CommonGetResume(cacheId: String, resumeId: Int): ResumeData!
  ENTCheckEnterpriseIdentification: EnterpriseIdentification!
  ENTPrecheckForInviteWorkMate(phoneNumber: String): WorkerMatePrecheckResult!
  "get applicant by conditions, null for no limitation, null when no matched data"
  HRGetApplicants(filter: ApplicantFilter): SearchApplicantsResult
  "true means already inserted"
  QNCheckIdCardNumber(idCardNum: String!): Boolean!
  QNPhoneNumberCheck(phoneNumber: String, verifyCode: String): Int!
  StaticGetAllRegion: RegionList!
  "get all cities of the given province"
  StaticGetCities(provinceId: String!): [City]!
  "get all counties of the given city"
  StaticGetCounties(cityId: String!): [County]!
  StaticGetHotJobs: Void
  "get Province data"
  StaticGetProvinces: [Province]
  "get all town of the given county"
  StaticGetTowns(countyId: String!): [Town]!
  StaticSendEmail(emailAddress: String!): String
  "send a verify code to the given number, if phoneNumber not provider and has token in header, will send to the user's phone number"
  StaticSendSms(phoneNumber: String): String!
  "just tests"
  TestShowDatas(lastIndex: String, pageSize: Int): [PersonalDataView]!
  UserGetBasicInfo: UserBasicInfo!
  UserGetContractList: [Contract]!
  UserGetEnterpriseDetail_EntInfo(entId: Int): EnterpriseInfoForEntDetail!
  UserGetEnterpriseDetail_WorkerList(entId: Int, role: EnterpriseRole): [WorkerInfoForWorkerList]!
  UserGetJobListByEntId(category: [String], entId: Int, page: Int, pageSize: Int, status: JobStatus, title: String, workerId: Int): JobListForHRDetailPageOrEntJobList!
  "if page not provided it will be 0,for pageSize it will be 10"
  UserGetMessages(page: Int, pageSize: Int, targetId: Int!): MessagePage
  "api for login"
  UserLogIn(info: LogIn!): LoginResult!
  "check if the input num is availiable or not"
  UserNumberCheck(num: String!): Boolean!
  UserVerifyCodeConsume(info: VerifyInfo): Void
}

type RecommendationsListForHRDetailPage {
  count: Int!
  data: [JobDataForHRDetailPageOrEntJobList]!
}

type RegionList {
  data: [ProvinceWithChildren]!
}

type ResumeData {
  educationExperience: [ResumeEduExp]
  "checkout ResumeEmployNature type for value options"
  employmentNature: String!
  jobExpectation: JobExpectation!
  "checkout ResumeJobStatus type for value options"
  jobStatus: String!
  personalAdvantage: String!
  personalData: ResumePersonalData!
  projectExperience: [ResumeProExp]
  workExperience: [ResumeWorkExp]
}

type ResumeEduExp {
  detail: String!
  "check out Education type for value options"
  education: String!
  id: Int!
  major: String!
  schoolName: String!
}

type ResumePersonalData {
  age: Int!
  education: Education!
  gender: Boolean!
  "a link to the file"
  logo: String!
  phoneNumber: String!
  realName: String!
  workExperienceTime: Int!
}

type ResumeProExp {
  detail: String!
  id: Int!
  projectName: String!
  "maybe not needed to send when showing the whole resume at a page"
  project_performance: String
  role: String!
  time: String!
}

type ResumeWorkExp {
  departmentName: String!
  detail: String!
  enterpriseName: String!
  id: Int!
  positionName: String!
  time: String!
}

type SearchApplicantsResult {
  data: [ApplicantData]
}

type Subscription {
  newContract: Contract!
  newMessage: Message!
}

type Town {
  name: String!
  town_id: String!
}

"the return type of getUsers api, not stable now, just because the api not implement yet"
type User {
  "username: the username of the user stored in the database"
  username: String!
}

type UserBasicInfo {
  birth_date: String
  current_city: String
  education: Education
  email: String
  first_time_working: String
  gender: Boolean
  image_url: String!
  phone_number: String!
  username: String!
}

type WorkerInfoForWorkerList {
  createdAt: String
  disabled: Boolean
  id: Int!
  logo: String!
  name: String!
  pos: String!
  role: EnterpriseRole
}

enum ActiveTime {
  LastDay
  MoreThanOneWeek
  RecentlyOneWeek
  RecentlyThreeDays
  Today
}

enum CustomFileType {
  Charter
  Other
  Photo
  Resume
}

"min education required for the job"
enum EducationRequired {
  Doctor
  High
  JuniorCollege
  Postgraduate
  RegularCollege
}

enum InterviewProcess {
  "whatnever this is canceled the status will be set to Canceled, when status is like this, return value will contains a description of the canceled status"
  Canceled
  "Only HR could set this, means this applicant is not the one their company is looking for"
  Failed
  "means this applicant get that offer, but may not choose to work there"
  Passed
  "means this interview is not able to be canceled now, but may not be started yet"
  Started
  "Waiting is a status that stands for waiting applicant to accept this invitation"
  Waiting
}

enum ResumeEmployNature {
  "随时待命"
  Anytime
  "一月内"
  LessThanOneMonth
  "一周之内"
  LessThanOneWeek
  "两天之内"
  LessThanTwoDays
  "两周内"
  LessThanTwoWeeks
  "大于一个月"
  MoreThanOneMonth
}

enum ResumeJobStatus {
  "应届生"
  GraduatingStudent
  "不想找工作的无业游民"
  NoJobButNoJob
  "离职状态的求职者"
  NoJobButWantJob
  "有工作，但无求职意向"
  OnTheJob
  "准备跳槽下家的在职者"
  OnTheJobButLookingForAJob
}

input ApplicantFilter {
  "checkout ActiveTime type for value options"
  activeTime: String
  age: Int
  category: String
  city: String
  "checkout Education type for value options"
  education: String
  experience: Int
  "true means male, sorry for female people"
  gender: Boolean
  "checkout ResumeJobStatus type for value options"
  jobStatus: String
  max_salary: Int
  min_salary: Int
  token: String!
}

"because the personal data is already exists, I choose this for the name"
input BasicData {
  birthday: String
  currentCity: String
  education: Education
  firstTimeWorking: String
  gender: Boolean
  "a link to the file"
  logo: String
  username: String
}

"same datas as the Insert one, but are all not required"
input EditEnterpriseBasicInfo {
  abbreviation: String
  "checkout EnterpriseIndustry type for value options"
  enterpriseFinancing: EnterpriseFinancing
  enterpriseIndustry: [String]
  "pass the whole adress information in this array"
  enterpriseLocation: [String]
  enterpriseName: String
  "checkout EnterpriseNature type for value options"
  enterpriseNature: EnterpriseNature
  enterpriseProfile: String
  "checkout EnterpriseSize type for value options"
  enterpriseSize: EnterpriseSize
  "longtitude and latitude"
  enterprisecCoordinate: [Float]
  establishedDate: String
  homepage: String
  logo: String
  tel: String
}

input EditJobExpectation {
  aimed_city: String
  full_time_job: FullTime
  industry_involved: [String]
  job_category: [String]
  max_salary_expectation: Int
  min_salary_expectation: Int
}

input EduExp {
  education: Education
  exp_at_school: String!
  "for edit you need pass this data"
  id: Int
  isFullTime: Boolean
  major: String
  resumeId: Int
  schoolName: String
  time: String
}

input EntListFilter {
  fullName: String
  id: Int
  identitifyTime: [String]
  isAvaliable: Boolean
  phoneNumber: String
}

input EnterpriseBasicInfo {
  abbreviation: String!
  "checkout EnterpriseIndustry type for value options"
  enterpriseFinancing: EnterpriseFinancing!
  enterpriseIndustry: [String]!
  "pass the whole adress information in this array"
  enterpriseLocation: [String]!
  enterpriseName: String!
  "checkout EnterpriseNature type for value options"
  enterpriseNature: EnterpriseNature!
  enterpriseProfile: String!
  "checkout EnterpriseSize type for value options"
  enterpriseSize: EnterpriseSize!
  "longtitude and latitude"
  enterprisecCoordinate: [Float]!
  establishedDate: String
  homepage: String
  logo: String
  tel: String
}

input EnterpriseCharterSencorRequest {
  charter: String!
  enterpriseName: String!
  "just a phone number for notification"
  phoneNumber: String
}

input EnterpriseWorkTimeAndWelfare {
  customTags: [String]
  overtimeWorkDegree: EnterpriseOvertime
  restRule: EnterpriseRestRule
  welfare: [String]
  workRule: String
}

input EnterpriseWorkerInfo {
  pos: String!
  role: EnterpriseRole!
}

input JobFilter {
  category: [String]
  education: Education
  enterpriseFinancing: EnterpriseFinancing
  enterpriseSize: EnterpriseSize
  experience: Int
  full_time_job: FullTime
  page: Int
  pageSize: Int
  salaryExpected: [Int]
  sortWithDistance: [Float]
}

input JobPost {
  JobTitle: String!
  coordinates: [Float]!
  description: String!
  education: EducationRequired!
  experience: Int!
  isFullTime: FullTime!
  publishNow: Boolean!
  requiredNum: Int!
  "just a two value array which first value means the min one, second means the max"
  salary: [Int]!
  tags: [String]!
  workingAddress: String!
}

input LogIn {
  account: String!
  deviceId: String
  password: String
}

"the data = require(the providers?"
input PersonalData {
  city: String!
  education: Education!
  idCardNum: String!
  "real name"
  name: String!
  number: String!
  skills: [String]!
}

input ProExp {
  description: String
  endAt: String
  "for edit you need pass this data"
  id: Int
  performance: String
  projectName: String
  resumeId: Int
  role: String
  startAt: String
}

input Register {
  "confirmPassword: required, exactly same as password"
  confirmPassword: String!
  "email: not required in this version, unique, make sense by the name"
  email: String
  "password: required, rule not set up yet"
  password: String!
  "phoneNumber: required, unique, make sense by the name"
  phoneNumber: String!
  "username: required, unique, make sense by the name"
  username: String!
}

"reset password means that user forget password"
input ResetPassword {
  confirmPassword: String!
  password: String!
  phoneNumber: String
}

input SendMessage {
  messageContent: String!
  messageType: MessageType!
  to: Int!
}

input UploadExtraAttributes {
  customFileName: String
  "checkout CustomFileType for value options"
  customFileType: String
  customUploadPath: String
}

input UserListFilter {
  currentCity: String
  id: Int
  isAvaliable: Boolean
  keyword: String
  phoneNumber: String
  registerTime: [String]
}

input VerifyInfo {
  operation: String!
  phoneNumber: String!
  verifyCode: String!
}

input WorkExperience {
  compName: String
  department: String
  endAt: String
  hideFromThisCompany: Boolean!
  "for edit you need pass this data"
  id: Int
  posName: String
  resumeId: Int
  startAt: String
  workDetail: String
}


"The `Upload` scalar type represents a file upload."
scalar Upload

scalar Void

"enum Education {    LessThanPrime,    Primary,    Junior,    High,    JuniorCollege,    RegularCollege,    Postgraduate,    Doctor  }"
scalar Education

"enum EnterpriseOvertime {    None,    Paid,    SomeTime"
scalar EnterpriseOvertime

"enum {Full,        Part,        InternShip}"
scalar FullTime

"enum {    PersonalUser,    EnterpriseUser,    Administrator,    Counselor,  }"
scalar Identity

"enum EnterpriseNature {    ForeignVentures,    ForeignFundedEnterprises,     PrivateEnterprise,     StateOwnedEnterprises,     Extra  }"
scalar EnterpriseNature

"enum EnterpriseFinancing {    NotYet,    AngelFinancing,    A,    B,    C,    D,    Listed,    NoNeed  }"
scalar EnterpriseFinancing

"enum EnterpriseSize {    LessThanFifteen,     FifteenToFifty,     FiftyToOneHundredFifty,     OneHundredFiftyToFiveHundreds,     FiveHundredsToTwoThousands,     MoreThanTwoThousands  }"
scalar EnterpriseSize

"enum EnterpriseRestRule {    OneDayOffPerWeekend,     TwoDayOffPerWeekend,     StaggerWeekends,    ShiftWork  }"
scalar EnterpriseRestRule

"enum {None, Failed, Passed, Waiting}"
scalar EnterpriseIdentificationStatus

"enum Role {    HR,    Teacher,    Admin,    None  }"
scalar EnterpriseRole

"enum WorkerMatePrecheckResult {    OK    NotAUser    AlreadyWorkMate    WorkingInAnotherCompany  }"
scalar WorkerMatePrecheckResult

"enum {    Normal,    System,    Resume,    InterviewInvitation,    Other    }"
scalar MessageType

"enum JobStatus {    NotPublishedYet,    InRecruitment,    OffLine  }"
scalar JobStatus
